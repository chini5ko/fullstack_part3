{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","type","className","Persons","persons","deletePerson","map","person","key","name","number","onClick","Filter","props","value","filterText","onChange","handleFilter","PersonsForm","onSubmit","addPerson","newName","event","setNewName","target","newNumber","setNewNumber","App","useState","setPersons","setFilterText","filterPersons","setFilterPersons","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","console","log","personeService","initialPersons","personToBeDeleted","window","confirm","filter","toLowerCase","includes","preventDefault","isNotANewName","some","isNotANewNumer","alert","foundPerson","find","changedPerson","returnedPerson","catch","error","setTimeout","personObject","concat","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.756df293.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// local \r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\n//Heroku\r\n// const baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) =>{\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObjectById = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default {getAll, create, update ,deleteObjectById}","import React, { useState, useEffect } from 'react'\nimport personeService from './services/persons'\nimport './index.css'\n\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  if(type === 'sucess'){\n    return (\n      <div className=\"sucess\">\n        {message}\n      </div>\n    )\n  }\n\n  if(type === 'error'){\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n \n}\n\nconst Persons = ({persons, deletePerson}) =>{\n  return(\n    <div>\n      {persons.map((person) => <p key={person.id}>{person.name} {person.number} <button onClick={() => deletePerson(person)}>delete</button></p>)}\n    </div>\n  )\n}\n\nconst Filter = (props) =>{\n\n  return(\n    <div>\n      <div> filer shown with <input value={props.filterText} onChange={props.handleFilter}></input></div>\n    </div>\n  )\n}\n\nconst PersonsForm = (props) =>{\n\n  return(\n   <form onSubmit={props.addPerson}>\n        <div> name: <input value={props.newName} onChange={(event) => props.setNewName(event.target.value)} /> </div>\n        <div>number: <input value={props.newNumber} onChange={(event) => props.setNewNumber(event.target.value)}  /></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n  </form>\n  )\n}\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterText, setFilterText ] = useState('')\n  const [ filterPersons, setFilterPersons] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  // const [errorMessage, setErrorMessage] = useState('some error happened...')\n  const [notificationType, setNotificationType] = useState('sucess')\n\n\n  useEffect(() => {\n    console.log('effect')\n    personeService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addPerson = (event) =>{\n    event.preventDefault();\n    let isNotANewName = persons.some((person) => person['name'] === newName);\n    let isNotANewNumer = persons.some((person) => person['number'] === newNumber);\n\n    // create a new person\n    if(!isNotANewName && !isNotANewNumer){\n\n      const personObj = {name: newName , number: newNumber};\n\n        personeService\n          .create(personObj)\n          .then(personObject => {\n            setPersons(persons.concat(personObject))\n\n            setNotificationMessage(`Added ${personObject.name}`)\n            setNotificationType('sucess');\n\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 2000);\n\n            setNewName('')\n            setNewNumber('')\n          })\n  \n      // setPersons(persons.concat(personObj));\n    }\n    else if(!isNotANewNumer){\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n\n        // find id \n        const foundPerson = persons.find( person => person.name === newName);\n        const changedPerson = {... foundPerson, number: newNumber}\n\n        //update\n        personeService\n          .update(foundPerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map( person => person.id !== foundPerson.id ? person: returnedPerson ))\n          })\n          .catch( error =>{\n            setNotificationType('error');\n            setNotificationMessage(`Information of ${newName} has already been removed from serer`)\n\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 2000);\n\n          })\n      }\n    }\n\n    else{\n      alert(`${newName} is already added to phonebook` );\n      setNewName('')\n      setNewNumber('')\n    }\n   \n  }\n\n  const handleFilter = (event) => {\n    setFilterText(event.target.value)\n    setFilterPersons( persons.filter( (person) => person.name.toLowerCase().includes(event.target.value.toLowerCase())))\n  }\n\n  const deletePerson = (personToBeDeleted) => {\n\n    if(window.confirm(`Delete ${personToBeDeleted.name}`)){\n      personeService\n      .deleteObjectById(personToBeDeleted.id)\n      .then(\n        setPersons(persons.filter((person) => person.id !== personToBeDeleted.id))\n      )\n      .then(\n        setFilterText('')\n      )\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} type={notificationType} />\n\n      <Filter filterText={filterText} handleFilter={handleFilter}></Filter>\n\n      <h2>Add a new </h2>\n\n    <PersonsForm addPerson={addPerson} setNewName={setNewName}  setNewNumber={setNewNumber}>  newNumber={newNumber} newName={newName}</PersonsForm>\n\n      <h2>Numbers</h2>\n    {filterText.length>0? <Persons deletePerson={deletePerson} persons={filterPersons}></Persons>: <Persons deletePerson={deletePerson}  persons={persons}></Persons>}\n   \n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App  />,\n  document.getElementById('root')\n)"],"sourceRoot":""}